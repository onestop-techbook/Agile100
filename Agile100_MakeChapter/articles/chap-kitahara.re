= 90％シンドロームを患っていたチームが、どうやって回復したか

//flushright{
kitahara
//}

== 何が起きていた？


とあるチームが１週間スプリントでスクラム開発を行なっていたのですが、
スプリント終了時点で、Doingのアイテムが複数残っていることが常態化していました。

//quote{
@<strong>{ある日のスプリントレビューの風景}


Dev「ほぼほぼ開発できているので、90％ぐらいは終わっています。」


PO「デモ見せてもらえる？」


Dev「まだデモが見せられる状態ではありません。」


PO「。。。」
//}

スクラムなのに、バックログアイテムも分解しているのに、それでも90%シンドロームが起きてしまう。
@<strong>{スクラムなのに90％シンドローム!}


常に進捗報告のプレッシャーを受けながら開発をしてきたプログラマの習性なのでしょうが、きちんと解決しないとなんちゃってアジャイルを邁進する事になってしまいます。
何よりも、Doneにならない事を普通と思う空気がチームにできてしまっているので、根本的な部分から立て直しが必要そうです。


プロジェクト統括なる人にも状況を聞いてみたところ、やはり、「計画通りに進まなかったり、見通しが立てられない事に不満を感じてるが、具体的な改善策が見つからないまま、ずるずるとプロジェクトを進めていた」ようです。


そしてスクラムマスターからは「じゃあ残業を増やして稼働を上げましょう」なんていう意見が飛び出す始末で、早く手を打たないと本当にマズい状況です。


きちんとアウトプットできるチームへ立て直しをしないとみんな不幸になってしまいますし、
何よりプロジェクト失敗の原因をスクラムのせいにされてしまうのは見過ごせません。


ということで、スクラムマスター補佐（？）という役割で無理矢理チームに参画することとなりました。
以下、私たちがどうやって安定したベロシティを出せるチームになったかをご紹介します。


※アウトプットじゃなくてアウトカムだろ！みたいな意見はもっともなのですが、スクラムが機能していないのでまずは安定したベロシティでアウトプットできる事を目指しました。

== Doneにならない原因を考えてみた




 * ベロシティを生産性の目標値としていた



スプリントプランニング時には、チームのキャパシティよりも多めにスプリントバックログアイテムを積むように、PO、SMから指示されていたそうです。
当然見積もりには下振れもあるので、「全部Doneになって時間が余ったらもったいない」という思考ですね。


気持ちは分からなくもないですが、リソース効率だけにフォーカスした結果、全てのアイテムがDoneにならなくても当たり前の状況を自ずから作り出してしまっていました。

 * 割り込み作業が多い



サービス開始前なので、業務が停止するような緊急事態は本来は発生しないはずです。
ですが、業務整理が並行で進んでいたため、調査やら他システム向けのテストデータ作成など、今日明日締め切りの作業依頼が頻繁に発生していました。


一つ一つの作業は軽微だったのですが、当然のことながら頻繁な割り込み作業は開発効率を大きく低下させます。

 * バックログアイテムのサイズが大き過ぎる



そもそものアイテムが十分に分解出来ていなそうです。


対象のプロダクトがAPI中心だったことも影響しているのですが、フロント周りの機能がほとんど無かったために〇〇APIを作成するといったアイテムが散見されました。


画面機能であれば「〇〇ボタンを押下したら画面が遷移する」といったように、単純な動作をアイテムに切り分けるのならばそれほど悩むこともなさそうですが、何せAPIだと切り分け方がよく分からない。これがアイテムを分解しにくい一因になっていそうです。

== 何をやったか


==== その1:すべてをDoneにする


キャパシティを超えるような計画を止めて、スプリントごとに全てがDoneになる量で計画することにしました。
（プロジェクト管理者に認めてもらうまでには相当の戦いがありましたが、、）


==== その2:割り込み作業を止める


次にプロジェクト管理者やステークホルダーに根気強くスイッチングコストの説明を行い、割り込み作業は全て次のスプリント（翌週）まで待ってもらうようにしました。
（プロジェクト管理者に認めてもらうまでには相当の戦いがありましたが、、）


==== その3:バックログアイテムを小さく分解する


そして、バックログアイテムをより小さく分解することに取り組むのですが、外的な阻害要因よりも、むしろ一番苦労した問題でした。



ここからはアイテム分解の話しを中心にしたいと思います。


@<strong>{REST API開発する場合、どうやって分解すれば良いのか？}


従来型の開発であれば、


①テーブル作成して、②データオブジェクトなりアクセサーなり作って、③呼び出し処理を作って、④メイン作って、⑤最後にAPI Gatewayで公開


こんな感じでしょうか。


でもこの通りに作って行くとエンドツーエンドになりません。


スプリントレビューで「テーブルが出来ました」とか「〇〇共通部品が出来ました」と言われても、プロダクトオーナーも困惑するでしょう。


プログラマーが機能を分解しようとするとコンポーネント指向で水平分割してしまいがちですが、理想を言うとアイテムの分解においてはエンドツーエンドの垂直分割にして、その配下のタスクはコンポーネントに分解したいわけです。


言うのは簡単ですが、概念を理解すれば実践できるほど簡単なものでもありません。
実際にアイテムを垂直分割で小さく分解できるようになるまでにはチーム全員で頭を悩ませながら取り組んでいきました。

=== どうやってエンドツーエンドになるように分解したのか


@<strong>{「フロント（に近い）側、つまりエンドポイントから開発をする」}を基本方針としました。


従来の開発順序だとデータベース側、つまりフロントから遠い側からレイヤーを積み重ねるような進め方をしていたものを、これまでとは逆側から作り始めようなんて言いだしたのだから、当然開発メンバーから反発されました。


「プログラム分かってないヤツが何か変な事言い出したぞ」といった様子で大ブーイングです。


そこで簡単な例を挙げて、「こんな感じで一回作ってみましょう。今週の開発進捗が大幅に下がったら、来週は元のやり方に戻せば良いだけなので気にしないでください。プロダクトオーナーには私が変なやり方を押し付けたせいだと言ってもらって構いません。」と言ったところ、
「そこまで言うなら一度やってみよう」開発メンバーは受け入れてくれました。



@<strong>{基本方針（抜粋）}

 * バックログアイテム（ストーリー）は、エンドツーエンドで動作する単位で分ける
 * ○○ファンクションの作成等のコンポーネントで分割しない
 * アイテム（ストーリー）は、半日〜1日で完了するサイズを目安にする。
 * 実際に使用するストーリーポイントは1～3pt程度
 * それ以上のサイズは分割を検討する
 * 可能な限り1Ptに揃えるのが理想
 * 複雑なロジックが必要な場合は分割を検討する
 * 基本フローだけ先に作成して、機能をアドインする
 * 前提条件
 ** 操作、実行トリガー
 ** インターフェース仕様
 ** データ取得元、格納先
 * 受け入れ基準（Acceptance Criteria）は、ユーザーが確認できる事柄を記載する
 ** 期待する結果 
 ** アウトプットは成果物デモが出来るもの
 ** 受け入れ基準には、やらないこと（実装しないもの）を書いても良い 
 ** エラーハンドリング、リトライ機能等を別アイテムに切り出す場合

 * 例）RESTful APIのGETの場合
 
 1. エンドポイントURLへリクエスト送信→200が返る（パラメータなし、または受け捨て）
 2. GETが投げられたら、該当テーブルを参照してレコードを1件返す（テーブルを参照出来ていることが確認できれば返す値は何でも良い）
 3. GETパラメータにユニークキーを一つ指定して、該当レコードが正常に取得できる
 4. GETパラメータを複数指定して、該当レコードが正常に取得できる（入力IFの実装）
 5. 複数レコードが正常に取得できる
 6. 参照結果を出力IFに合わせて返却する



やってみると最初はアイテムを分割するのに戸惑ってかなり時間を使いましたが、いざ実装の段になるとすぐに変化が見え始めました。


デイリースクラムで日々タスクが完了していくのが見えるようになると、明らかにリズムが良くなっている事が見てとれました。


開発メンバーも、アイテムのゴールまでの道筋がイメージしやすいのでつまづく事も減り、開発ペースが上がっていることを実感できたと言っていました。


開発リズムが良くなり上手く機能し始めたのですが、また別の課題が顕在化してきました。

=== Readyになっているバックログアイテムがすぐに枯渇してしまう。


原因は明らかで、プロダクトバックログリファイメントを週に1時間しかやっていなかったので絶対的に時間が不足していました。


ただ、原因は明らかでしたが、POは社内のさまざまな会議に追われて、4時間（スプリントの10％）なんてまとまった時間は取れません。


そこでバックログリファイメントを毎日少しずつやるようにし、POにも一部でも参加してもらうようにしました。
具体的には、デイリースクラム後にリファイメントを45分やる事にして、デイリースクラムと合わせて1時間の枠で行いました。


注意点としては、デイリースクラムの終了を明確にして、今は何の議論を行うのかをチーム一人ひとりが意識して会話できる状態を作ることが重要です。


毎日少しずつバックログリファイメントを行なってみて感じた効果は、時間の確保以外にもバックログリファイメントの間に反芻する時間があるため、かえって深く考える事ができました。


ただし、時間が細切れになるので検討過程の情報も残しておいて、すぐに思い返せるような工夫が必要になります。


また副次的な効果として、デイリースクラムの直後にあらかじめ予定が組まれていることで15分以内に終わらせる意識が強くなりました。例えば、つい課題共有から検討が始まってデイリースクラムの時間がずるずると伸びてしまうようなことも無くなりました。


初めてスクラムをやってみて、一通りのプラクティスは実行しているのに上手く機能しないと感じている人は、プロダクトバックログリファイメントが十分に出来ているかを見直してみると良いかも知れません。


こんな取り込みをおこなって、やっと毎スプリント全てのアイテムをDoneにできるチームになる事ができました。

=== まとめ


チームの立て直しで行ったことは3点

 * 適正な計画を立てる
 * 割り込み作業を発生させない
 * プロダクトバックログを最新に保つ


どれもスクラムを実践している人にとって当たり前のことかと思います。


結局のところ、スプリントバックログアイテムをすべてDoneにする。という当たり前のことが出来ていなかったのは、スクラムの基本に則って開発ができていなかった事が原因でした。


スクラムが上手く機能していないと感じた時に、何か良いプラクティスが無いか探し回ったり、アジャイルコーチや実践者に相談してみたり、色々と動き回ってみるのも良いですが、そんな時こそ一度基本に立ち返ってスクラムガイドに忠実であるか見直してみると、答えが見つかるかも知れません。

　

//embed{
    \begin{minipage}{.1\linewidth}
        \centering
        \includegraphics[width=.75\linewidth]{images/chap-kitahara/kitahara.jpg}
    \end{minipage}
    \begin{minipage}{.89\linewidth}
        kitahara https://twitter.com/kitaharat2\\
        Agile Tech EXPO Organizar / Agile Japan実行委員
        \end{minipage}
    \hspace{1ex}
//}

雑誌編集者→n次受け開発ベンダー→情シス→SIer→コンサルタント／喜びと感動に満ちたチームの実現を目指してスクラムマスターやってます。