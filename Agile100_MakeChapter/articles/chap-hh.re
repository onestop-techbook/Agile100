= アジャイル開発のはずなのに  - ローコードでアジャイル開発の罠 -


//flushright{
hh
//}

近年、DX（デジタルトランスフォーメーション）で業務改革という言葉をよく聞きます。そして素早くDXを実現するためにアジャイル開発を導入しよう、アジャイル開発をするために簡単に開発ができるローコードツールを活用しようという話もよく聞きます。

しかし目新しい言葉を使っただけでは思い通りにはなりません。

== あるシステム開発での話

発注元の事業会社A社は業務のDX化を進めるため大規模なプロジェクトを始めました。プロジェクトには有名なローコードツールを導入することになりました。

このローコードツールの販売元B社はツールのライセンスを販売を行い、ツールの使い方のセミナーの開催などをしますが、基本的に直接システム開発は引き受けません。代わりにB社はA社にツールに詳しいSIerを紹介します。

C社はツールを使った開発実績を持つSIerです。B社のツールは事業会社の社員がほぼノーコーディングで多くの機能を実装できますが、複雑な業務フローの実装や、たくさんの社内システムの連携などを行う場合はコーディングをする必要がありSierに依頼が必要でした。C社はB社のツールを使用した開発を多数手がけています。

　

A社はDX推進に力を入れていました。

ツール会社B社の営業からさまざまな機能の説明を受け、セミナーにも参加してツールの使い方を覚え、実際に社内で試してみたりもしていました。ツールのデフォルト画面にはある程度の機能があり、すぐに使い始められそうに見えます。

B社の営業は、今までイチから開発していた様々な機能がこのツールに標準で組み込まれているので開発なし、もしくは少しだけの開発で短期間で実現できますと言います。

SIerのC社の営業は「ツールですぐに画面を作れるので、打ち合わせの場でそのまま動かしながら要件を決めていけます。アジャイル開発です！」と言います。

A社のDXプロジェクトのメンバーはすぐに画面を見られるなら、事業の担当部署の人たちに画面を使ってもらってフィードバックをもらえると思いました。DXは新しい試みであり、既存の業務フローにどんな影響をあたえるのか事前に予想がしにくいため、事業担当部署の意見を聞きながら進めたいと考えていました。

 

こうして発注が決まり、SIerのC社から開発チームがアサインされ、開発が始まりました。

A社のプロジェクトメンバーはC社のプロジェクトマネージャ（PM）に「既存のシステムはこういう仕組みです」「これからはここをこう変えたいです」と要件を伝えます。C社PMは「はいできます」「もちろんできます」と回答します。

しかし要件定義で出来上がってくるのは画面ではなくExcelシートとパワポファイル。画面を触りたいのだとPMに伝えると、画像で作った紙芝居的な画面が出てきてしばらくするとまたExcelとパワポの資料に戻ります。

A社の業務部門はDXプロジェクトメンバーからC社が作成した資料を渡されても見方がよくわからないし、そもそも実際のローコードツールで作った画面が触れると聞いているため、資料の内容を見てもこれで仕様が決定すると思っていません。

業務部門からの次々に追加要件や変更要望が入り、結局話がまとまらず、要件定義フェーズが終わってしまったものの仕様が確定しない箇所が残ったまま開発フェーズに入ってしまいました。残りは開発しながら詰めていく予定でした。

開発を進めていったところ、C社から要件定義の場で出来るといわれたことが実際には出来ないことが判明してしまいます。ローコードツールを使わないフルスクラッチ開発ならば期間と費用をかければ出来るはずの機能ですが、B社ローコードツールの制約によってどうしても実現できないのです。

そしてプロジェクトはついに炎上へ。

なにがいけなかったのでしょうか？

== 発注まで

「アジャイル開発」という言葉が営業のための売り文句になってしまっています。

ツール会社B社の営業はライセンスを売ることが目的です。A社のシステムに必要がないライセンスも売れたもの勝ちと考えている向きがあります。

SIerのC社の営業はローコードツールを用いた開発の一般的な流れをイメージして「アジャイル開発ができる」と言っているにすぎません。A社がやりたいアジャイル開発の進め方がどのようなものなのかは意識していません。

また、受注の際に「アジャイル開発」という売り文句を使ったことを開発メンバーにちゃんと伝えていませんでした。

== 開発初期段階にて

上述のようにC社の営業と開発チームの間では「アジャイル開発でやる」と前提が共有されていません。

このためC社の開発チームのPMはウォーターフォール的にExcelやパワポの資料を作って要件定義の合意を取ろうと進めてしまい、A社から「画面が見たい」と言わると紙芝居的な仮の画面を作って見せれば良いのだと考えてしまっていました。

また、アジャイル開発をするのであれば、開発に入る前にA社とC社の間でこれからどういう仕組みで進めるのか、どんなことをアジャイルにしたいのかをしっかり話し合うべきでした。これを行わず慣習的なウォーターフォールの手法で開発に入ってしまったためアジャイル開発は言葉だけとなってしまいました。

A社は自らの意図や目的が開発チームにもきちんと伝わっているかを確認する必要があり、C社も営業と開発でコミュニケーションをとり、受注の際の情報が抜け落ちないようにするべきでしょう。

== ローコードツールでアジャイル？

ローコードツールを使っているから自然とアジャイル開発になると考えるのは危険です。

ローコードツールは標準機能で様々な機能が使えるものが多いですが、実際の業務フローに当てはめると細かい箇所でカスタマイズが効かないケースが出ます。こういったケースでは業務側をツールのやり方に合わせて変更するのか、費用と時間を掛けてツールにカスタマイズを行うのかを見極める必要があります。

しかしこの見極めを行うにはそのツールを熟知している必要があります。ツールが多機能なものである場合、開発メンバー側もすべての機能に熟知しているわけではありません。事前にどの機能を使うのかがわかっていないと適切な開発メンバーをアサインすることが出来ず、開発時に正しい見極めができなくなります。

またローコードツールを使った開発では事前検証を綿密にする必要があります。ローコードツールを使わない場合よりもしっかり検証しないと危険です。

開発のプログラミング言語やフレームワーク、DBやサーバーをイチから決めて開発する場合よりもローコード開発は立ち上がりが楽で、一見システムが早く出来上がり始めるように見えます。

しかし、ローコードツールを使って開発した場合は開発段階が進んでから、どうしても実現できない要件が出てきたときにとても対応がしにくくなります。ツールを使うのを辞める、という選択肢しかない状態すらあり、すでに多額のライセンスも購入してしまっている場合は使うのを辞めるわけにもいかないという苦しい状態になることもあります。

それにくらべればツールを使わず開発していた場合は、状況にも寄りますが、後からの仕様変更も無理ではありません。

なので、ローコードツールを使用した開発を行う場合は本当に実現できるのか確信できるまで検証を行うべきです。

== されどローコードでアジャイルは進む

ここまでの例で書いたように、ローコードツールを使ってもアジャイル開発が簡単に出来るわけではありません。

とはいえ、現代ではビジネスの変化が加速しており、柔軟に素早くシステム開発がしたいという要望は高まっています。

ローコードツールの魅力はビジネスを行う事業会社がSIerなどのベンダーを介さず直接自社のITシステムをコントロールしていける点にあります。

今はまだまだ過渡期ですが、システムのノーコード、ローコード化は進んでいき、やがてはSIerでなく事業会社が主体的にアジャイルでプロジェクトを進めていくようになるでしょう。

　

//embed{
    \begin{minipage}{.1\linewidth}
        \centering
        \includegraphics[width=.75\linewidth]{images/hh.jpg}
    \end{minipage}
    \begin{minipage}{.89\linewidth}
        hh\\
        \end{minipage}
    \hspace{1ex}
//}

SIerで働いています。今回はローコードでアジャイル開発の闇の世界を書いていますが、次は光の世界の話を書きたいです。
